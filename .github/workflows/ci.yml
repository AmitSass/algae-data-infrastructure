name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

env:
  PYTHON_VERSION: '3.13'

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files
    
    - name: Run linting
      run: |
        flake8 algae_lib/ scripts/ orchestration/airflow/
        black --check algae_lib/ scripts/ orchestration/airflow/
        isort --check-only algae_lib/ scripts/ orchestration/airflow/
    
    - name: Run security scan
      run: |
        bandit -r algae_lib/ scripts/ orchestration/airflow/
        safety check

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up environment variables
      run: |
        echo "PGHOST=localhost" >> $GITHUB_ENV
        echo "PGPORT=5432" >> $GITHUB_ENV
        echo "PGDATABASE=test_db" >> $GITHUB_ENV
        echo "PGUSER=postgres" >> $GITHUB_ENV
        echo "PGPASSWORD=postgres" >> $GITHUB_ENV
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=algae_lib --cov-report=xml
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  dbt-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dbt
      run: |
        python -m pip install --upgrade pip
        pip install dbt-core dbt-postgres
    
    - name: Set up environment variables
      run: |
        echo "PGHOST=localhost" >> $GITHUB_ENV
        echo "PGPORT=5432" >> $GITHUB_ENV
        echo "PGDATABASE=test_db" >> $GITHUB_ENV
        echo "PGUSER=postgres" >> $GITHUB_ENV
        echo "PGPASSWORD=postgres" >> $GITHUB_ENV
    
    - name: Run dbt debug
      run: |
        cd transform/dbt
        dbt debug
    
    - name: Run dbt compile
      run: |
        cd transform/dbt
        dbt compile
    
    - name: Run dbt test
      run: |
        cd transform/dbt
        dbt test

  great-expectations:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Great Expectations
      run: |
        python -m pip install --upgrade pip
        pip install great-expectations
    
    - name: Run Great Expectations validation
      run: |
        cd data_quality/great_expectations
        great_expectations --v3-api checkpoint run flowcam_checkpoint
    
    - name: Build data docs
      run: |
        cd data_quality/great_expectations
        great_expectations --v3-api docs build
    
    - name: Upload data docs
      uses: actions/upload-artifact@v3
      with:
        name: data-docs
        path: data_quality/great_expectations/data_docs/

  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker-compose build
    
    - name: Test Docker images
      run: |
        docker-compose up -d
        sleep 30
        docker-compose ps
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [lint-and-format, test, dbt-test, great-expectations, docker-build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add deployment steps here
    
    - name: Notify deployment
      run: |
        echo "Deployment completed successfully!"
